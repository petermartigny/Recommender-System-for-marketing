# Bayesian approach


import pandas as pd
import numpy as np

# Import Data

produits=pd.read_csv("C:/Users/utilisateur/Desktop/Ekimetrics/Ekimetrics/Produits.csv", sep=";")
short=pd.read_csv("C:/Users/utilisateur/Desktop/Ekimetrics/Ekimetrics/Short.csv", sep=";")

# Clean 'ProductReference' column

short.ProductReference=short["ProductReference"].map(str.strip)
short.ClientCode=short["ClientCode"].map(str.strip)
short.TransactionType=short["TransactionType"].map(str.strip)




# Give the products purchased by each client (we forget the products returned by clients, ie those with quantity <=0)
def purchase(client):
    client_purchase = short[(short.ClientCode == client) & (short.Quantity>0)].ProductReference.unique()
    return client_purchase
    
# Give the products not purchased by client
def non_purchase(client):
    basket = purchase(client)
    sales = short[short.Quantity > 0]
    client_non_purchase = []
    for i in sales.ProductReference.unique():
        if i not in basket:
            client_non_purchase.append(i)
    return client_non_purchase

# Compute the probability to buy product
def proba_y(product):
    proba = (short[(short["ProductReference"] == product) & (short.Quantity > 0)].Quantity.sum())/short[short.Quantity > 0].Quantity.sum()
    return proba

# Compute the probability to buy product1 given product2 is bought
def proba1(product1, product2):
    product_1_buyers=short[(short.ProductReference==product1) & (short.Quantity>0)].ClientCode.unique()
    product_2_buyers=short[(short.ProductReference==product2) & (short.Quantity>0)].ClientCode.unique()
    common_buyers=set(product_1_buyers).intersection(product_2_buyers)
    if len(product_2_buyers)!=0:
        proba = len(common_buyers)/len(product_2_buyers)
        return proba
    else:
        return 0

# Compute Bayes probability to buy product for client
def proba(product, client):
    basket = purchase(client)
    prod = 1
    for i in basket:
        prod *= proba1(i, product)
    return prod*proba_y(product)
    


## Goal: Given a client and a number N, give the N products to recommend among those the client has not purchased yet
def predict_Bayes(client, number):
    basket = purchase(client)
    together = pd.DataFrame([[proba(product, client),product] for product in non_purchase(client)])
    together.columns = ['Proba', 'Product']
    together = together.sort_values(['Proba'], ascending=False).head(number + 1)
    return together
